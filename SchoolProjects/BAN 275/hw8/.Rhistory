View(Vol.log)
row.names(Vol.log)<-1:nrow(Vol.log)
row.names(Vol.log)
rownames(Vol.log)
str(Vol.log)
dimnames(Vol.log)
str(Adj.log)
?dailyReturn
data.frame(Adj.log)
row.names(data.frame(Adj.log))
sG.spec <- ugarchspec(variance.model=list(model='sGARCH',garchOrder=c(1,3),
external.regressors=data.frame(Vol.log)),
mean.model=list(armaOrder=c(3,3),include.mean=T),
distribution.model='std')
show(sG.spec)
sG.fit <- ugarchfit(sG.spec,Adj.log)
dim(data.frame(Adj.log))
timeSeries(Vol.log)
dim(timeSeries(Vol.log))
rownames(timeSeries(Vol.log))
sG.spec <- ugarchspec(variance.model=list(model='sGARCH',garchOrder=c(1,3),
external.regressors=timeSeries(Vol.log)),
mean.model=list(armaOrder=c(3,3),include.mean=T),
distribution.model='std')
show(sG.spec)
sG.fit <- ugarchfit(sG.spec,Adj.log)
show(sG.fit)
bootp.sG <- ugarchboot(sG.fit,method='Partial',n.ahead=50,n.bootpred=50)
show(bootp.sG)
bootp.sG <- ugarchboot(sG.fit,method='Partial',n.ahead=50,n.bootpred=50)
slotNames(bootp.sG)
bootp.sG@fsreis
bootp.sG@fseries
slotNames(bootp.sG)
str(bootp.sG@fseries)
str(bootp.sG@fsigma)
str(bootp.sG@bcoef)
str(bootp.sG@model)
str(bootp.sG@forc)
str(bootp.sG@bcoef)
str(bootp.sG@model)
str(bootp.sG@forc)
# Rugarch Project
library(quantmod)
library(rugarch)
library(FinTS)
library(tseries)
library(timeSeries)
library(fUnitRoots)
library(forecast)
###--------------------- Data Preparation ---------------------###
getSymbols('CFI',src='yahoo',from='2010-01-01',to='2015-03-31',return.class='timeSeries')
# write.csv(CFI,file='CFI-rawdata')
chartSeries(CFI,theme='white')
CFI.ts <- CFI[,c(5,6)]
ArchTest(CFI.ts)
Vol.log <- dailyReturn(CFI.ts[,1],type='log')[-1]
Adj.log <- dailyReturn(CFI.ts[,2],type='log')[-1]
# CFI.pv <- cbind(Vol.log,Adj.log)
###------ Determine ARFIMA component -------###
arfima.fit <- suppressWarnings(arfima(Adj.log))
summary(arfima.fit)
iTestArima.f(arfima.fit,200)
arma.p <- length(arfima.fit$ar) #3
arma.q <- length(arfima.fit$ma) #3
# arima.fit <- arima(Adj.log,order=c(3,0,2))
# iTestArima(arima.fit,200)
###--------------------- Modeling ---------------------###
# Fit GARCH
sG.spec <- ugarchspec(variance.model=list(model='sGARCH',garchOrder=c(1,3),
external.regressors=timeSeries(Vol.log)),
mean.model=list(armaOrder=c(3,3),include.mean=T),
distribution.model='std')
show(sG.spec)
sG.fit <- ugarchfit(sG.spec,Adj.log)
show(sG.fit)
plot(sG.fit,which='all')
# Fit EGARCH
eG.spec <- ugarchspec(variance.model=list(model='eGARCH',garchOrder=c(1,1),
external.regressors=timeSeries(Vol.log)),
mean.model=list(armaOrder=c(3,3),include.mean=T,
external.regressors=NULL),
distribution.model='std')
show(eG.spec)
eG.fit <- ugarchfit(eG.spec,data=Adj.log,solver.control=list(trace=0))
show(eG.fit)
plot(eG.fit,which='all')
###--------------------- Prediction ---------------------###
# Predict GARCH
bootp.sG <- ugarchboot(sG.fit,method='Partial',n.ahead=50,n.bootpred=50)
show(bootp.sG)
plot(bootp.sG,which='all')
bootf.sG <- ugarchboot(sG.fit,method='Full',n.ahead=50,n.bootpred=50)
show(bootf.sG)
plot(bootf.sG,which='all')
# Predict EGARCH
bootp.eG <- ugarchboot(eG.fit,method='Partial',n.ahead=50,n.bootpred=50)
show(bootp.eG)
plot(bootp.eG,which='all')
bootf.eG <- ugarchboot(eG.fit,method='Full',n.ahead=50,n.bootpred=50)
show(bootf.eG)
plot(bootf.eG,which='all')
sG.spec <- ugarchspec(variance.model=list(model='sGARCH',garchOrder=c(1,3),
external.regressors=as.matrix(Vol.log)),
mean.model=list(armaOrder=c(3,3),include.mean=T),
distribution.model='std')
show(sG.spec)
sG.fit <- ugarchfit(sG.spec,Adj.log)
show(sG.fit)
bootp.sG <- ugarchboot(sG.fit,method='Partial',n.ahead=50,n.bootpred=50)
bootp.sG <- ugarchboot(sG.fit,method='Partial',n.ahead=50,n.bootpred=50)
show(bootp.sG)
plot(bootp.sG,which='all')
plot(bootf.sG,which='all')
pacf(Adj.log)
pacf(Adj.log^2)
acf(Adj.log)
pacf(Adj.log^2)
arfima.fit <- suppressWarnings(arfima(Adj.log))
summary(arfima.fit)
iTestArima.f(arfima.fit,200)
arfima.fit <- suppressWarnings(arfima(Adj.log))
summary(arfima.fit)
iTestArima.f(arfima.fit,200)
arfima.fit <- suppressWarnings(arfima(Adj.log))
summary(arfima.fit)$Coefficients
arfima.fit
arfima.fit$Coefficients
arfima.fit$Coefficient
arfima.fit$coefficient
arfima.fit$ar
names(summary(arfima.fit))
summary(arfima.fit)$coef
summary(arfima.fit)$coef
iTestArima.f(arfima.fit,200)
summary(arfima.fit)$coef
iTestArima.f(arfima.fit,200)
setwd('/Users/gabrielfeng/Documents/R directory/BAN 275/hw8')
lrt <- read.csv('lrtwald(1).csv')
hackm <- read.csv('hachmwk(1).csv')
library(aod)
library(lmtest)
library(sandwich)
######--------------------------- Q1 ---------------------------######
## a)
lrt.fit <- lm(y~x.1+x.2+x.3,lrt)
# Create R and r
# B2=-3*B1 ===> 0*B0-3*B1-1*B2+0*B3=0
beta <- coef(lrt.fit)
R <- matrix(c(0,3,1,0), 1, 4)
r <- 0
# Run wald test
lrt.wald <- wald.test(vcov(lrt.fit), b=beta, L=R, H0=r)
wcp <- lrt.wald$result$chi2[3]
cat("Wald tes p.value = ", round(wcp,4), '\n')
lrt.wald.f <- wald.test(vcov(lrt.fit), b=beta, L=R, H0=r, df =lrt.fit$df.residual)
wfp <- lrt.wald.f$result$Ftest[4]
cat("Wald/2~F p.value = ", round(wfp,4), '\n')
# Comment: Both p value are close and larger than 0.05, which means we should
# reject the H0. That is, the regress has is heteroscedastic.
## b)
# B2=-3*B1
lrt.fit.null <- lm(y~I(x.1-3*x.2)+x.3,lrt) # null
lrt.fit.alter <- lm(y~x.1+x.2+x.3,lrt) # alternative
# Log-likelihood Test
nobs=length(lrt.fit.null$residual)
LR <- nobs * (log(abs(sum(lrt.fit.null$coef)))-log(abs(sum(lrt.fit.alter$coef))))
1-pchisq(LR,lrt.fit.alter$df) # p-value
# Log-likelihood Test using lrtest()
lrtest(lrt.fit.null,lrt.fit.alter)
# Comment: Both p-value are larger than 0.05, which means we cannot reject H0.
# That is, the model with restriction is better fit for the lrtwald data.
## Partial F-test
SSE.null <- sum(lrt.fit.null$residuals^2)
SSE.alter <- sum(lrt.fit.alter$residuals^2)
s1 <- (SSE.null - SSE.alter) / length(r)
s2 <- SSE.alter / lrt.fit.alter$df #(50-3-1)
fstat <- s1/s2 # fstat
1-pchisq(fstat,1) # p-value
# Comment: Same result as former one.
######--------------------------- Q2 ---------------------------######
head(hackm)
hackm.fit <- lm(y~x.1+x.2+x.3,hackm)
print(summary(hackm.fit))
bptest(hackm.fit)
# Comment: p-value is less than 0.05, which means we should reject H0. That is,
# The regression is heteroscedastic.
# Test to see if the coefficient on x3 is statistically significant using the
# output from the lm fit and a HAC adjusted lm fit.
hackm.hac.se <- sqrt(diag(vcovHAC(hackm.fit)))
tbl <- summary(hackm.fit)$coefficients
tbl[,2] <- hackm.hac.se
tbl[,3] <- tbl[,1]/tbl[,2]
tbl[,4] <- 2*(1-pt(tbl[,3],hackm.fit$df.residual,lower.tail=F))
tbl
summary(hackm.fit)$coefficients
# Comment: Comparing coefficients from first fit and the fit after HAC adjucted, we find that
# estiamte of x.3 is significant in first fit, while it is not significant in the
# other fit.
# Rugarch Project
library(quantmod)
library(rugarch)
library(FinTS)
library(tseries)
library(timeSeries)
library(fUnitRoots)
library(forecast)
###--------------------- Data Preparation ---------------------###
getSymbols('CFI',src='yahoo',from='2010-01-01',to='2015-03-31',return.class='timeSeries')
# write.csv(CFI,file='CFI-rawdata')
chartSeries(CFI,theme='white')
CFI.ts <- CFI[,c(5,6)]
ArchTest(CFI.ts)
Vol.log <- dailyReturn(CFI.ts[,1],type='log')[-1]
Adj.log <- dailyReturn(CFI.ts[,2],type='log')[-1]
# CFI.pv <- cbind(Vol.log,Adj.log)
###------ Determine ARFIMA component -------###
arfima.fit <- suppressWarnings(arfima(Adj.log))
summary(arfima.fit)$coef
iTestArima.f(arfima.fit,200)
arma.p <- length(arfima.fit$ar) #3
arma.q <- length(arfima.fit$ma) #3
###--------------------- Modeling ---------------------###
# Fit GARCH
sG.spec <- ugarchspec(variance.model=list(model='sGARCH',garchOrder=c(1,2),
external.regressors=timeSeries(Vol.log)),
mean.model=list(armaOrder=c(3,3),include.mean=T),
distribution.model='std')
show(sG.spec)
sG.fit <- ugarchfit(sG.spec,Adj.log)
show(sG.fit)
sG.spec <- ugarchspec(variance.model=list(model='sGARCH',garchOrder=c(1,2),
external.regressors=timeSeries(Vol.log)),
mean.model=list(armaOrder=c(3,3),include.mean=T),
distribution.model='sstd')
show(sG.spec)
sG.fit <- ugarchfit(sG.spec,Adj.log)
show(sG.fit)
# Rugarch Project
library(quantmod)
library(rugarch)
library(FinTS)
library(tseries)
library(timeSeries)
library(fUnitRoots)
library(forecast)
###--------------------- Data Preparation ---------------------###
getSymbols('CFI',src='yahoo',from='2010-01-01',to='2015-03-31',return.class='timeSeries')
# write.csv(CFI,file='CFI-rawdata')
chartSeries(CFI,theme='white')
CFI.ts <- CFI[,c(5,6)]
ArchTest(CFI.ts)
Vol.log <- dailyReturn(CFI.ts[,1],type='log')[-1]
Adj.log <- dailyReturn(CFI.ts[,2],type='log')[-1]
# CFI.pv <- cbind(Vol.log,Adj.log)
###------ Determine ARFIMA component -------###
arfima.fit <- suppressWarnings(arfima(Adj.log))
summary(arfima.fit)$coef
iTestArima.f(arfima.fit,200)
arma.p <- length(arfima.fit$ar) #3
arma.q <- length(arfima.fit$ma) #3
###--------------------- Modeling ---------------------###
# Fit GARCH
sG.spec <- ugarchspec(variance.model=list(model='sGARCH',garchOrder=c(1,2),
external.regressors=timeSeries(Vol.log)),
mean.model=list(armaOrder=c(3,3),include.mean=T),
distribution.model='std')
show(sG.spec)
sG.fit <- ugarchfit(sG.spec,Adj.log)
show(sG.fit)
sG.spec <- ugarchspec(variance.model=list(model='sGARCH',garchOrder=c(1,2),
external.regressors=timeSeries(Vol.log)),
mean.model=list(armaOrder=c(3,3),include.mean=T),
distribution.model='norm')
show(sG.spec)
sG.fit <- ugarchfit(sG.spec,Adj.log)
show(sG.fit)
eG.spec <- ugarchspec(variance.model=list(model='eGARCH',garchOrder=c(1,2),
external.regressors=timeSeries(Vol.log)),
mean.model=list(armaOrder=c(3,3),include.mean=T,
external.regressors=NULL),
distribution.model='std')
show(eG.spec)
eG.fit <- ugarchfit(eG.spec,data=Adj.log,solver.control=list(trace=0))
show(eG.fit)
eG.spec <- ugarchspec(variance.model=list(model='eGARCH',garchOrder=c(1,2),
external.regressors=timeSeries(Vol.log)),
mean.model=list(armaOrder=c(3,3),include.mean=T,
external.regressors=NULL),
distribution.model='sstd')
show(eG.spec)
eG.fit <- ugarchfit(eG.spec,data=Adj.log,solver.control=list(trace=0))
show(eG.fit)
sG.spec <- ugarchspec(variance.model=list(model='sGARCH',garchOrder=c(1,2),
external.regressors=timeSeries(Vol.log)),
mean.model=list(armaOrder=c(3,3),include.mean=T),
distribution.model='sstd')
show(sG.spec)
sG.fit <- ugarchfit(sG.spec,Adj.log)
show(sG.fit)
plot(sG.fit,which='all')
rm(list=ls())
# Rugarch Project
library(quantmod)
library(rugarch)
library(FinTS)
library(tseries)
library(timeSeries)
library(fUnitRoots)
library(forecast)
###--------------------- Data Preparation ---------------------###
getSymbols('CFI',src='yahoo',from='2010-01-01',to='2015-03-31',return.class='timeSeries')
# write.csv(CFI,file='CFI-rawdata')
chartSeries(CFI,theme='white')
CFI.ts <- CFI[,c(5,6)]
ArchTest(CFI.ts)
Vol.log <- dailyReturn(CFI.ts[,1],type='log')[-1]
Adj.log <- dailyReturn(CFI.ts[,2],type='log')[-1]
# CFI.pv <- cbind(Vol.log,Adj.log)
###------ Determine ARFIMA component -------###
arfima.fit <- suppressWarnings(arfima(Adj.log))
summary(arfima.fit)$coef
iTestArima.f(arfima.fit,200)
arma.p <- length(arfima.fit$ar) #3
arma.q <- length(arfima.fit$ma) #3
###--------------------- Modeling ---------------------###
# Fit GARCH
sG.spec <- ugarchspec(variance.model=list(model='sGARCH',garchOrder=c(1,2),
external.regressors=timeSeries(Vol.log)),
mean.model=list(armaOrder=c(3,3),include.mean=T),
distribution.model='sstd')
show(sG.spec)
sG.fit <- ugarchfit(sG.spec,Adj.log)
show(sG.fit)
plot(sG.fit,which='all')
# Fit EGARCH
eG.spec <- ugarchspec(variance.model=list(model='eGARCH',garchOrder=c(1,2),
external.regressors=timeSeries(Vol.log)),
mean.model=list(armaOrder=c(3,3r),include.mean=T,
external.regressors=NULL),
distribution.model='sstd')
show(eG.spec)
eG.fit <- ugarchfit(eG.spec,data=Adj.log,solver.control=list(trace=0))
show(eG.fit)
plot(eG.fit,which='all')
###--------------------- Prediction ---------------------###
# Predict GARCH
bootp.sG <- ugarchboot(sG.fit,method='Partial',n.ahead=50,n.bootpred=50)
show(bootp.sG)
plot(bootp.sG,which='all')
bootf.sG <- ugarchboot(sG.fit,method='Full',n.ahead=50,n.bootpred=50)
show(bootf.sG)
plot(bootf.sG,which='all')
# Predict EGARCH
bootp.eG <- ugarchboot(eG.fit,method='Partial',n.ahead=50,n.bootpred=50)
show(bootp.eG)
plot(bootp.eG,which='all')
bootf.eG <- ugarchboot(eG.fit,method='Full',n.ahead=50,n.bootpred=50)
show(bootf.eG)
plot(bootf.eG,which='all')
eG.spec <- ugarchspec(variance.model=list(model='eGARCH',garchOrder=c(1,2),
external.regressors=timeSeries(Vol.log)),
mean.model=list(armaOrder=c(3,3),include.mean=T,
external.regressors=NULL),
distribution.model='sstd')
show(eG.spec)
eG.fit <- ugarchfit(eG.spec,data=Adj.log,solver.control=list(trace=0))
show(eG.fit)
rm(list=ls())
# Rugarch Project
library(quantmod)
library(rugarch)
library(FinTS)
library(tseries)
library(timeSeries)
library(fUnitRoots)
library(forecast)
###--------------------- Data Preparation ---------------------###
getSymbols('CFI',src='yahoo',from='2010-01-01',to='2015-03-31',return.class='timeSeries')
# write.csv(CFI,file='CFI-rawdata')
chartSeries(CFI,theme='white')
CFI.ts <- CFI[,c(5,6)]
ArchTest(CFI.ts)
Vol.log <- dailyReturn(CFI.ts[,1],type='log')[-1]
Adj.log <- dailyReturn(CFI.ts[,2],type='log')[-1]
# CFI.pv <- cbind(Vol.log,Adj.log)
###------ Determine ARFIMA component -------###
arfima.fit <- suppressWarnings(arfima(Adj.log))
summary(arfima.fit)$coef
iTestArima.f(arfima.fit,200)
arma.p <- length(arfima.fit$ar) #3
arma.q <- length(arfima.fit$ma) #3
###--------------------- Modeling ---------------------###
# Fit GARCH
sG.spec <- ugarchspec(variance.model=list(model='sGARCH',garchOrder=c(1,2),
external.regressors=timeSeries(Vol.log)),
mean.model=list(armaOrder=c(3,3),include.mean=T),
distribution.model='sstd')
show(sG.spec)
sG.fit <- ugarchfit(sG.spec,Adj.log)
show(sG.fit)
plot(sG.fit,which='all')
# Fit EGARCH
eG.spec <- ugarchspec(variance.model=list(model='eGARCH',garchOrder=c(1,2),
external.regressors=timeSeries(Vol.log)),
mean.model=list(armaOrder=c(3,3),include.mean=T,
external.regressors=NULL),
distribution.model='sstd')
show(eG.spec)
eG.fit <- ugarchfit(eG.spec,data=Adj.log,solver.control=list(trace=0))
show(eG.fit)
plot(eG.fit,which='all')
###--------------------- Prediction ---------------------###
# Predict GARCH
bootp.sG <- ugarchboot(sG.fit,method='Partial',n.ahead=50,n.bootpred=50)
show(bootp.sG)
plot(bootp.sG,which='all')
bootf.sG <- ugarchboot(sG.fit,method='Full',n.ahead=50,n.bootpred=50)
show(bootf.sG)
plot(bootf.sG,which='all')
# Predict EGARCH
bootp.eG <- ugarchboot(eG.fit,method='Partial',n.ahead=50,n.bootpred=50)
show(bootp.eG)
plot(bootp.eG,which='all')
bootf.eG <- ugarchboot(eG.fit,method='Full',n.ahead=50,n.bootpred=50)
show(bootf.eG)
plot(bootf.eG,which='all')
iTestArima.f = function(arima.fit, nobs, lb.lags = c(6,12,18,24))
# nobs, a strictly positive integer, is length of output
# series fitting arima.fit, before un-differencing.
{
library(timeSeries)
library(tseries)   # for ts.plot() and jarque.bera.test()
p <- length(arima.fit$model$phi[arima.fit$model$phi!=0])
q <- length(arima.fit$model$theta[arima.fit$model$theta!=0])
d <- length(arima.fit$model$Delta[arima.fit$model$Delta!=0])
#------------  Model Diagnostics for Validation  ----------------------------
#------------ Test residuals for normality
print(jarque.bera.test(na.omit(residuals(arima.fit))))
qqnorm(residuals(arima.fit), main =
paste("Normal Probability Plot(",p,d,q,")"))
#------------- Test for Autocorrelation
lb.mat = matrix(0,length(lb.lags),3)
dimnames(lb.mat) = list(NULL, c("To.Lag", "Statistic" , "p.value"))
index = 1
for (i in lb.lags){
result  =  Box.test(na.omit(residuals(arima.fit)),  lag = i,
type = "Ljung-Box", fitdf = p+q)
lb.mat[index,] =  c(i,result$statistic, result$p.value)
index = index +1
}
acf(residuals(arima.fit), na.action=na.pass, lag.max = 12,  main =
paste("ACF Residuals(",p,d,q,")"))
acf(residuals(arima.fit), na.action=na.pass, lag.max = 12, type = "partial",
main = paste("PACF Residuals(",p,d,q,")"))
cat("\n Ljung-Box Test\n\n" )
print(lb.mat)
cat("\n ===========================  The end ==========================\n")
}
save.image("~/Documents/R directory/BAN 275/Proj_rugarch/May 8.RData")
plot(bootp.sG,which='all')
plot(bootf.sG,which='all')
plot(bootp.eG,which='all')
plot(bootf.eG,which='all')
show(bootp.sG)
slotNames(show(bootp.sG))
slotNames(bootp.sG)
str(bootp.sG@fseries)
str(bootp.sG@fsigma)
str(bootp.sG@bcoef)
str(bootp.sG@bcoef$coef)
str(bootp.sG@model)
str(bootp.sG@forc)
str(bootp.sG@fseries)
plot(bootp.sG@fseries)
plot(bootp.sG@fseries,type='l')
plot.ts(bootp.sG@fseries)
bootp.sG@fseries
dim(bootp.sG@fseries)
bootp.sG@forc
dim(bootp.sG@forc)
names(bootp.sG@forc)
str(bootp.sG@forc)
str(bootp.sG@forc@forecast)
str(bootp.sG@forc@forecast$sigmaFOr)
str(bootp.sG@forc@forecast$sigmaFor)
bootp.sG@forc@forecast$sigmaFor
str(bootp.sG@fsigma)
plot(bootp.sG@forc@forecast$sigmaFor)
plot.ts(bootp.sG@forc@forecast$sigmaFor)
plot.ts(bootp.sG@forc@forecast$seriesFor)
str(bootp.sG@fsigma)
bootp.sG@forc@forecast
str(bootp.sG@forc@forecast)
str(bootp.sG@forc)
str(bootp.sG@model)
str(bootp.sG@model$n.ahead)
str(bootp.sG@bcoef)
str(bootp.sG@bcoef$coef)
str(bootp.sG@fsigma)
str(bootp.sG@fseries)
plot.ts(bootp.sG@forc@forecast$seriesFor)
summary(bootp.sG@fseries)
summary(bootp.sG@fseries)
show(bootp.sG)
summary(bootp.sG@fseries)
?ugarchboot
resid(sG.fit)
resid(sG.fit)
str(bootf.sG@fseries)
show(bootf.sG)
show(sG.fit)
