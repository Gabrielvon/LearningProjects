##
plot(-4:4, -4:4, type = "n",axes=F,ylab="",xlab="")
segments(-1.5,3,-1.5,-3,col="red")
segments(-1.7,1.1,-2,-1.1,col="red")
segments(-1.5,1.1,-1,-1.1,col="red")
segments(-0.5,2.1,1.3,2.1,col="red")
segments(-0.8,0,2,0,col="red")
segments(1.3,2.1,1.3,0,col="red")
segments(0.4,3,0.4,0,col="red")
segments(0.4,0,-0.3,-3,col="red")
segments(0.4,0,1.3,-3,col="red")
###
plot(-4:4, -4:4, type = "n",axes=F,ylab="",xlab="")
segments(2,3,-2,2,col="red")
segments(-2,2,-2,0,col="red")
segments(-2,0,2,0,col="red")
segments(0,2,0,-3.5,col="red")
segments(0,-3.5,-0.8,-2.3,col="red")
segments(-2,-3,-1,-1,col="red")
segments(2,-3,1,-1,col="red")
plot(-4:4, -4:4, type = "n",axes=F,ylab="",xlab="")
segments(-3,0,-1,4,col="red")
segments(-2,2,2,2,col="red")
segments(0,4,0,-3,col="red")
segments(-2,0,2,0,col="red")
par(mfrow=c(2,2))
#
plot(-4:4, -4:4, type = "n",axes=F,ylab="",xlab="")
segments(-3,0,-1,4,col="red")
segments(-2,2,2,2,col="red")
segments(0,4,0,-3,col="red")
segments(-2,0,2,0,col="red")
segments(-3,-3,3,-3,col="red")
##
plot(-4:4, -4:4, type = "n",axes=F,ylab="",xlab="")
segments(-2,3,2,3,col="red")
segments(-2,0,2,0,col="red")
segments(-2,-3,2,-3,col="red")
segments(-2,3,-2,-3,col="red")
segments(2,3,2,-3,col="red")
##
plot(-4:4, -4:4, type = "n",axes=F,ylab="",xlab="")
segments(-1.5,3,-1.5,-3,col="red")
segments(-1.7,1.1,-2,-1.1,col="red")
segments(-1.5,1.1,-1,-1.1,col="red")
segments(-0.5,2.1,1.3,2.1,col="red")
segments(-0.8,0,2,0,col="red")
segments(1.3,2.1,1.3,0,col="red")
segments(0.4,3,0.4,0,col="red")
segments(0.4,0,-0.3,-3,col="red")
segments(0.4,0,1.3,-3,col="red")
###
plot(-4:4, -4:4, type = "n",axes=F,ylab="",xlab="")
segments(2,3,-2,2,col="red")
segments(-2,2,-2,0,col="red")
segments(-2,0,2,0,col="red")
segments(0,2,0,-3.5,col="red")
segments(0,-3.5,-0.8,-2.3,col="red")
segments(-2,-3,-1,-1,col="red")
segments(2,-3,1,-1,col="red")
par(mfrow=c(2,2))
#
plot(-4:4, -4:4, type = "n",axes=F,ylab="",xlab="")
segments(-3,0,-1,4,col="red")
segments(-2,2,2,2,col="red")
segments(0,4,0,-3,col="red")
segments(-2,0,2,0,col="red")
segments(-3,-3,3,-3,col="red")
##
plot(-4:4, -4:4, type = "n",axes=F,ylab="",xlab="")
segments(-2,3,2,3,col="red")
segments(-2,0,2,0,col="red")
segments(-2,-3,2,-3,col="red")
segments(-2,3,-2,-3,col="red")
segments(2,3,2,-3,col="red")
##
plot(-4:4, -4:4, type = "n",axes=F,ylab="",xlab="")
segments(-1.5,3,-1.5,-3,col="red")
segments(-1.7,1.1,-2,-1.1,col="red")
segments(-1.5,1.1,-1,-1.1,col="red")
segments(-0.5,2.1,1.3,2.1,col="red")
segments(-0.8,0,2,0,col="red")
segments(1.3,2.1,1.3,0,col="red")
segments(0.4,3,0.4,0,col="red")
segments(0.4,0,-0.3,-3,col="red")
segments(0.4,0,1.3,-3,col="red")
###
plot(-4:4, -4:4, type = "n",axes=F,ylab="",xlab="")
segments(2,3,-2,2,col="red")
segments(-2,2,-2,0,col="red")
segments(-2,0,2,0,col="red")
segments(0,2,0,-3.5,col="red")
segments(0,-3.5,-0.8,-2.3,col="red")
segments(-2,-3,-1,-1,col="red")
segments(2,-3,1,-1,col="red")
load("~/Dropbox/TM project/Numeric Data/Code/model3.RData")
setwd('/Users/gabrielfeng/Dropbox/TM\ project/Numeric\ Data/Code')
# MTS practise
require(MTS)
require(mvtnorm)
require(timeSeries)
# Import data
train=read.table('train.csv',sep=',',header=TRUE)
test=read.table('test.csv',sep=',',header=TRUE)
da=train[,2:dim(train)[2]]
tdx=train[,1]
mq(da,10) # it rejects H0, which mean the series are autocorrelated.
Eccm(da) #(3,0),(2,1) are possible order for modeling.
library(fBasics)
VARorder(da)
library(fBasics)
m2 = VAR(da,p=3,include.mean=T)
mq(m2$residuals,10) #pass all lags
jarqueberaTest(m2$residuals) #failed
# MTSdiag(m2)
m2 = refVAR(m2,thres=0.1)
mq(m2$residuals,10) #pass all lags
jarqueberaTest(m2$residuals) #failed
phi=m2$Phi; theta=m2$Theta; sig=m2$Sigma
VARMAirf(Phi=phi,Theta=theta, Sigma=sig, orth=F)
m2.pred=VARpred(m2,h=50)$pred
m3=VARMA(da,2,1)
rm(list=ls())
setwd('/Users/gabrielfeng/Dropbox/TM\ project/Numeric\ Data/Code')
# MTS practise
require(MTS)
require(mvtnorm)
require(timeSeries)
# Import data
train=read.table('train.csv',sep=',',header=TRUE)
test=read.table('test.csv',sep=',',header=TRUE)
da=train[,2:dim(train)[2]]
tdx=train[,1]
mq(da,10) # it rejects H0, which mean the series are autocorrelated.
Eccm(da) #(3,0),(2,1) are possible order for modeling.
# VAR
library(fBasics)
VARorder(da)
m2 = VAR(da,p=3,include.mean=T)
mq(m2$residuals,10) #pass all lags
jarqueberaTest(m2$residuals) #failed
# MTSdiag(m2)
m2 = refVAR(m2,thres=0.1)
mq(m2$residuals,10) #pass all lags
jarqueberaTest(m2$residuals) #failed
phi=m2$Phi; theta=m2$Theta; sig=m2$Sigma
VARMAirf(Phi=phi,Theta=theta, Sigma=sig, orth=F)
# aapl=cbind(test[1:50,1:2],m2.pred[,1])
# apply(aapl,2,sd)
# plot.ts(aapl[,2:3],type='l')
m2.pred=VARpred(m2,h=50)$pred
View(m2.pred)
m3=VARMA(da,2,1)
m3=VARMA(da,2,0)
MTSplot(da)
da2=diffM(da); tdx2=tdx[-nrow(da)]
m3=VARMA(da2,2,1)
MTSplot(da2)
mq(da2)
mq(da)
?VARMA
kidx=Kronid(da2)
m4.kr=Kronfit(da2,kidx$index)
scm.id=SCMid2(da2,maxp=10,maxq=5)
scms=scm.id$SCMorder
Tdx=max.col(scm.id$Tmatrix)
m4.scm=SCMfit(da2,scms,Tdx)
zt=da[,c(1,4)]; xt=da[,c(2:3,5:8)]
VARorder(zt)
VARXorder(zt,xt,10,3)
m5=VARX(zt,1,xt,3)
m5_ref=refVARX(m5)
MTSdiag(m5)
xt.pred=test[,c(2:3,5:8)]
m5.pred=VARXpred(m5_ref,xt.pred,hstep=50)
plot.ts(m5.pred)
save.image('model3.RData')
View(m2.pred)
m2 = VAR(da,p=3,include.mean=T)
mq(m2$residuals,10) #pass all lags
mq(da)
mq(da2)
Eccm(da2)
m2a  = VAR(da2,p=3)
mq(m2a$residuals,10)
m3=VARMA(da2,3,0)
m3=VARMA(da2,3,0,thres=1)
library(fBasics)
library(fBasics)
VARorder(da)
m2a = VAR(da2,p=3,include.mean=T)
mq(m2a$residuals,10) #all lags pass test
jarqueberaTest(m2a$residuals) #failed
# MTSdiag(m2)
m2a = refVAR(m2a,thres=0.1)
mq(m2a$residuals,10) #pass all lags
jarqueberaTest(m2a$residuals) #failed
phi=m2a$Phi; theta=m2a$Theta; sig=m2a$Sigma
VARMAirf(Phi=phi,Theta=theta, Sigma=sig, orth=F)
m2.pred=VARpred(m2a,h=50)$pred
View(m2.pred)
test
m2.pred0=m2.pred+test
aapl=cbind(test[1:50,1:2],m2.pred0[,1])
m2.pred0=m2.pred+test[1:50,2]
aapl=cbind(test[1:50,1:2],m2.pred0[,1])
View(aapl)
apply(aapl,2,sd)
plot.ts(aapl[,2:3],type='l')
aapl=cbind(test[1:50,1:2]-100,m2.pred0[,1]-100)
apply(aapl,2,sd)
plot.ts(aapl[,2:3],type='l')
aapl=cbind(test[1:50,1:2])
apply(aapl,2,mean)
aapl=cbind(test[1:50,1:2],m2.pred0[,1])
apply(aapl,2,mean)
aapl=cbind(test[1:50,1:2],m2.pred0[,1])
plot.ts(aapl[,2],type='l')
line(aapl[,3])
abline(aapl[,3])
?abline
abline(aapl[,c(1,3)])
abline(aapl[,c(1,3)])
par()
par(omi=c(0,0,0,0))
plot.ts(aapl[,2],type='l')
par$mar
par()$mar
par(mar=c(1,1,1,1)
)
plot.ts(aapl[,2],type='l')
par(mar=c(0.1,0.1,0.1,0.1))
plot.ts(aapl[,2],type='l')
par(mar=c(2,2,2,2))
plot.ts(aapl[,2],type='l')
par(mar=c(5.1,4.1,4.1,2.1))
plot.ts(aapl[,2],type='l')
library(ggplot2)
install.packages('ggplot2')
library(ggplot2)
qplot(aapl)
?qplot
qplot(aapl[,1],aapl[,2:3])
qplot(aapl[,2:3])
?qplot
qplot(aapl[,3])
qplot(aapl[,3],type='l')
plot(aapl[,1],aapl[,2],type="l",col="red")
lines(aapl[,1],aapl[,3],col="green")
plot.ts(aapl[,1],aapl[,2],type="l",col="red")
lines(aapl[,1],aapl[,3],col="green")
diff(test)
test
diffM(test)
plot(testD)
testD = diffM(test)[1:50,]
plot(testD)
plot(testD,type='l')
plot.ts(testD,type='l')
testD = diffM(test)[1:50,2:]
testD = diffM(test)[1:50,2:dim(test)[2]]
plot.ts(testD,type='l')
lines(m2.pred0[,1])
plot.ts(testD[,1],type='l')
lines(m2.pred0[,1])
plot.ts(testD[,1],type='l',col='red')
lines(m2.pred0[,1],col='green')
line(m2.pred0[,1],col='green')
?lines
?line
lines.ts(m2.pred0[,1],col='green')
?lines
?line.ts
?lines.ts
lines(m2.pred0[,1],type='l',col='green')
plot.ts(testD[,1],type='l',col='red')
lines(m2.pred0[,1],type='l',col='green')
tdx0=test[1:50,1]
plot.ts(tdx0,tetestD[,1],type='l',col='red')
plot.ts(tdx0,testD[,1],type='l',col='red')
lines(tdx0,m2.pred0[,1],type='l',col='green')
plot.ts(tdx0,testD[,1],type='l',col='red')
testD = diffM(test)[1:50,2:dim(test)[2]]
plot.ts(tdx0,testD[,1],type='l',col='red')
lines(tdx0,m2.pred0[,1],type='l',col='green')
plot.ts(tdx0,m2.pred0[,1],type='l',col='green')
plot.ts(1:50,testD[,1],type='l',col='red')
plot.ts(1:50,m2.pred0[,1],type='l',col='green')
plot.ts(1:50,testD[,1],type='l',col='red')
lines(1:50,m2.pred0[,1],type='l',col='green')
lines(1:50,m2.pred0[,1],col='green')
?plot.ts
?lines
m2.pred0[,1]
m2a.pred=VARpred(m2a,h=50)$pred
m2.pred0=m2a.pred
plot.ts(1:50,testD[,1],type='l',col='red')
lines(1:50,m2a.pred0[,1],col='green')
m2a.pred0=m2a.pred
lines(1:50,m2a.pred0[,1],col='green')
View(m2a.pred0)
m2a.pred0=VARpred(m2a,h=50)$pred
aapl=cbind(test[1:50,1:2],m2a.pred0[,1])
View(aapl)
aapl=cbind(testD,m2a.pred0[,1])
apply(aapl,2,sd)
aapl=cbind(testD[,1],m2a.pred0[,1])
apply(aapl,2,sd)
apply(aapl,2,mean)
View(aapl)
for (i in 1:8) {
plot.ts(1:50,testD[,i],type='l',col='red')
lines(1:50,m2a.pred0[,i],col='green')
}
apply(testD,2,mean)
apply(m2a.pred0,2,mean)
means=rbind(apply(testD,2,mean),apply(m2a.pred0,2,mean))
sds=rbind(apply(testD,2,sd),apply(m2a.pred0,2,sd))
View(means)
View(sds)
rm(list=ls())
tdx0=test[1:50,1]
setwd('/Users/gabrielfeng/Dropbox/TM\ project/Numeric\ Data/Code')
# MTS practise
require(MTS)
require(mvtnorm)
require(timeSeries)
# Import data
train=read.table('train.csv',sep=',',header=TRUE)
test=read.table('test.csv',sep=',',header=TRUE)
da=train[,2:dim(train)[2]]
tdx=train[,1]
mq(da,10) # it rejects H0, which mean the series are autocorrelated.
Eccm(da) #(3,0),(2,1) are possible order for modeling.
da2=diffM(da); tdx2=tdx[-nrow(da)]
Eccm(da2) #(3,0),(3,1) are possible order for modeling.
library(fBasics)
VARorder(da)
m2 = VAR(da,p=2,include.mean=T)
mq(m2$residuals,10) #all lags pass test
m2 = VAR(da,p=23,include.mean=T)
m2 = VAR(da,p=3,include.mean=T)
mq(m2$residuals,10) #all lags pass test
jarqueberaTest(m2$residuals) #failed
# MTSdiag(m2)
m2 = refVAR(m2,thres=0.1)
mq(m2$residuals,10) #pass all lags
jarqueberaTest(m2$residuals) #failed
phi=m2$Phi; theta=m2$Theta; sig=m2$Sigma
mq(m2$residuals,10) #all lags pass test
jarqueberaTest(m2$residuals) #failed
phi=m2$Phi; theta=m2$Theta; sig=m2$Sigma
VARMAirf(Phi=phi,Theta=theta, Sigma=sig, orth=F)
m2.pred=VARpred(m2,h=50)$pred
tdx0=test[1:50,1]
test = test[1:50,2:dim(test)[2]]
for (i in 1:8) {
plot.ts(1:50,test[,i],type='l',col='red')
lines(1:50,m2.pred[,i],col='green')
}
means=rbind(apply(test,2,mean),apply(m2.pred,2,mean))
sds=rbind(apply(test,2,sd),apply(m2.pred,2,sd))
View(means)
View(sds)
VARorder(da2)
m2D = VAR(da2,p=2,include.mean=T)
mq(m2D$residuals,10) #all lags pass test
m2D = VAR(da2,p=3,include.mean=T)
mq(m2D$residuals,10) #all lags pass test
m2D = VAR(da2,p=2,include.mean=T)
mq(m2D$residuals,10) #all lags pass test
jarqueberaTest(m2D$residuals) #failed
# MTSdiag(m2D)
m2D = refVAR(m2D,thres=0.1)
mq(m2D$residuals,10) #pass all lags
jarqueberaTest(m2D$residuals) #failed
phi=m2D$Phi; theta=m2D$Theta; sig=m2D$Sigma
VARMAirf(Phi=phi,Theta=theta, Sigma=sig, orth=F)
m2D.pred=VARpred(m2D,h=50)$pred
tdx0=test[1:50,1]
testD = diffM(test)[1:50,2:dim(test)[2]]
for (i in 1:8) {
plot.ts(1:50,testD[,i],type='l',col='red')
lines(1:50,m2D.pred[,i],col='green')
}
2:dim(test)[2]
diffM(test)
dim( diffM(test))
test = test[1:50,2:dim(test)[2]]
testD = diffM(test)[1:50,2:dim(test)[2]]
d(m2,h=50)$pred
tdx0=test[1:50,1]
test0 = test[1:50,2:dim(test)[2]]
for (i in 1:8) {
plot.ts(1:50,test0[,i],type='l',col='red')
lines(1:50,m2.pred[,i],col='green')
}
means=rbind(apply(test0,2,mean),apply(m2.pred,2,mean))
sds=rbind(apply(test0,2,sd),apply(m2.pr
ed,2,sd))
tdx0=test[1:50,1]
test0 = test[1:50,2:dim(test)[2]]
for (i in 1:8) {
plot.ts(1:50,test0[,i],type='l',col='red')
lines(1:50,m2.pred[,i],col='green')
}
means=rbind(apply(test0,2,mean),apply(m2.pred,2,mean))
sds=rbind(apply(test0,2,sd),apply(m2.pred,2,sd))
rm(list=ls())
setwd('/Users/gabrielfeng/Dropbox/TM\ project/Numeric\ Data/Code')
# MTS practise
require(MTS)
require(mvtnorm)
require(timeSeries)
# Import data
train=read.table('train.csv',sep=',',header=TRUE)
test=read.table('test.csv',sep=',',header=TRUE)
da=train[,2:dim(train)[2]]
tdx=train[,1]
mq(da,10) # it rejects H0, which mean the series are autocorrelated.
Eccm(da) #(3,0),(2,1) are possible order for modeling.
da2=diffM(da); tdx2=tdx[-nrow(da)]
Eccm(da2) #(3,0),(3,1) are possible order for modeling.
# VAR (3) without difference
library(fBasics)
VARorder(da)
m2 = VAR(da,p=3,include.mean=T)
# MTSdiag(m2)
m2 = refVAR(m2,thres=0.1)
mq(m2$residuals,10) #all lags pass test
jarqueberaTest(m2$residuals) #failed
phi=m2$Phi; theta=m2$Theta; sig=m2$Sigma
VARMAirf(Phi=phi,Theta=theta, Sigma=sig, orth=F)
tdx0=test[1:50,1]
test0 = test[1:50,2:dim(test)[2]]
for (i in 1:8) {
plot.ts(1:50,test0[,i],type='l',col='red')
lines(1:50,m2.pred[,i],col='green')
}
means=rbind(apply(test0,2,mean),apply(m2.pred,2,mean))
sds=rbind(apply(test0,2,sd),apply(m2.pred,2,sd))
m2.pred=VARpred(m2,h=50)$pred
tdx0=test[1:50,1]
test0 = test[1:50,2:dim(test)[2]]
for (i in 1:8) {
plot.ts(1:50,test0[,i],type='l',col='red')
lines(1:50,m2.pred[,i],col='green')
}
means=rbind(apply(test0,2,mean),apply(m2.pred,2,mean))
sds=rbind(apply(test0,2,sd),apply(m2.pred,2,sd))
VARorder(da2)
m2D = VAR(da2,p=2,include.mean=T)
# MTSdiag(m2D)
m2D = refVAR(m2D,thres=0.1)
mq(m2D$residuals,10) #pass all lags
jarqueberaTest(m2D$residuals) #failed
phi=m2D$Phi; theta=m2D$Theta; sig=m2D$Sigma
m2D.pred=VARpred(m2D,h=50)$pred
tdx0=test[1:50,1]
testD = diffM(test)[1:50,2:dim(test)[2]]
for (i in 1:8) {
plot.ts(1:50,testD[,i],type='l',col='red')
lines(1:50,m2D.pred[,i],col='green')
}
meansD=rbind(apply(testD,2,mean),apply(m2D.pred,2,mean))
sdsD=rbind(apply(testD,2,sd),apply(m2D.pred,2,sd))
View(meansD)
zt=da[,c(1,4)]; xt=da[,c(2:3,5:8)]
VARorder(zt)
VARXorder(zt,xt,10,3)
m5=VARX(zt,1,xt,3)
m5_ref=refVARX(m5)
MTSdiag(m5)
xt.pred=test[,c(2:3,5:8)]
m5.pred=VARXpred(m5_ref,xt.pred,hstep=50)
View(m5.pred)
View(test)
m5.pred=VARXpred(m5_ref,xt.pred,hstep=50)
testX = test[1:50,c(2,5)]
for (i in 1:2) {
plot.ts(1:50,test0[,i],type='l',col='red')
lines(1:50,m5.pred[,i],col='green')
}
means=rbind(apply(testX,2,mean),apply(m5.pred,2,mean))
sds=rbind(apply(testX,2,sd),apply(m5.pred,2,sd))
View(means)
View(meansD)
View(sds)
testX = test[1:50,c(2,5)]
for (i in 1:2) {
plot.ts(1:50,testX[,i],type='l',col='red')
lines(1:50,m5.pred[,i],col='green')
}
View(testX)
View(m5.pred)
zt=da2[,c(1,4)]; xt=da2[,c(2:3,5:8)]
VARorder(zt)
VARXorder(zt,xt,10,3)
m5=VARX(zt,1,xt,3)
m5_ref=refVARX(m5)
MTSdiag(m5)
testX = test[1:50,c(2,5)]
for (i in 1:2) {
plot.ts(1:50,testX[,i],type='l',col='red')
lines(1:50,m5.pred[,i],col='green')
}
meansX=rbind(apply(testX,2,mean),apply(m5.pred,2,mean))
sdsX=rbind(apply(testX,2,sd),apply(m5.pred,2,sd))
lines(1:50,m5.pred[,1],col='green')
View(testX)
View(test)
View(test)
